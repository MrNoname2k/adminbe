package org.api.services.impl;

import org.api.constants.ConstantColumns;
import org.api.constants.ConstantMessage;
import org.api.constants.ConstantStatus;
import org.api.entities.PostEntity;
import org.api.entities.UserEntity;
import org.api.payload.ResultBean;
import org.api.payload.response.UserResponse.PostResponse;
import org.api.payload.response.profilePageResponse.ProfileResponse;
import org.api.payload.response.profilePageResponse.ProfileTimeLineResponse;
import org.api.payload.response.profilePageResponse.UserProfileResponse;
import org.api.payload.response.profilePageResponse.TimeLineResponse;
import org.api.repository.PostEntityRepository;
import org.api.repository.UserEntityRepository;
import org.api.services.ProfileService;
import org.api.utils.ApiValidateException;
import org.api.utils.ItemNameUtils;
import org.api.utils.MessageUtils;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
public class ProfileServiceImpl implements ProfileService {

    @Autowired
    private UserEntityRepository userEntityRepository;
    @Autowired
    private PostEntityRepository postEntityRepository;
    @Autowired
    private ModelMapper modelMapper;

    @Override
    public ResultBean getMyTimeLine(String id) throws ApiValidateException, Exception {
        UserEntity entity = userEntityRepository.findOneById(id).orElseThrow(()-> new ApiValidateException(ConstantMessage.ID_ERR00002, ConstantColumns.USER_ID,
                MessageUtils.getMessage(ConstantMessage.ID_ERR00002, null, ItemNameUtils.getItemName(ConstantColumns.USER_ID, "profile"))));
        List<TimeLineResponse> postResponses = getMyPost(entity);
		List<PostHomeRespon> avatarResponses = this.getAvatarOrBanner(userEntity, "avatar");
        List<PostHomeRespon> bannerResponses = this.getAvatarOrBanner(userEntity, "banner");
        ProfileTimeLine tl = new ProfileTimeLine();
		ProfileUserResponse pRUR = new ProfileUserResponse();
		pRUR = modelMapper.map(entity, ProfileUserResponse.class);
		pRUR.setAvatars(avatarResponses);
		pRUR.setBanners(bannerResponses);
        tl.setResults(postResponses);
        ProfileResponse pRS = new ProfileResponse(tl,);
      return new ResultBean(pRS, ConstantStatus.STATUS_OK,ConstantMessage.MESSAGE_OK);
    }

    private List<TimeLineResponse> getMyPost(UserEntity entity){
        List<TimeLineResponse> postResponses = new ArrayList<>();
        postEntityRepository.getPostByUserId(entity.getId()).forEach(p->{
            postResponses.add(modelMapper.map(p,TimeLineResponse.class));
        });
        return postResponses;
    }
}
