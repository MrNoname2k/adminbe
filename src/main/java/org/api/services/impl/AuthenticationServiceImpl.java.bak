package org.api.services.impl;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.rpc.context.AttributeContext;
import org.api.annotation.LogExecutionTime;
import org.api.component.JwtTokenProvider;
import org.api.constants.*;
import org.api.entities.UserEntity;
import org.api.entities.UserRoleEntity;
import org.api.enumeration.MailTypeEnum;
import org.api.payload.ResultBean;
import org.api.payload.response.MailInfoResponse;
import org.api.payload.response.UserResponse.UserResponse;
import org.api.repository.RoleRepository;
import org.api.repository.UserEntityRepository;
import org.api.services.AuthenticationService;
import org.api.services.CustomUserDetailsService;
import org.api.services.MailerService;
import org.api.services.UserEntityService;
import org.api.utils.ApiValidateException;
import org.api.utils.DataUtil;
import org.api.utils.MessageUtils;
import org.api.utils.ValidateData;
import org.modelmapper.ModelMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.mail.MessagingException;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.ThreadLocalRandom;

@LogExecutionTime
@Service
@Transactional(rollbackFor = {ApiValidateException.class, Exception.class})
public class AuthenticationServiceImpl implements AuthenticationService {

    private static final String IPV4 = "103.178.235.170";
	private static final String LOCAL_HOST = "localhost:4200";

    private static final Logger log = LoggerFactory.getLogger(AuthenticationServiceImpl.class);

    @Autowired
    private UserEntityRepository userEntityRepository;

    @Autowired
    private PasswordEncoder encoder;

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private JwtTokenProvider tokenProvider;

    @Autowired
    private UserEntityService userEntityService;

    @Autowired
    private RoleRepository roleRepository;

    @Autowired
    private ModelMapper modelMapper;

    @Autowired
    private Gson gson;

    @Autowired
    private MailerService mailerService;

    @Override
    public ResultBean loginAuth(String json) throws ApiValidateException, Exception {
        UserEntity entity = new UserEntity();
        JsonObject jsonObject = DataUtil.getJsonObject(json);
        ValidateData.validate(ConstantJsonFileValidate.FILE_LOGIN_JSON_VALIDATE, jsonObject, false);
        entity =  gson.fromJson(jsonObject, UserEntity.class);
        if (Boolean.FALSE.equals(userEntityRepository.existsByMail(entity.getMail()))) {
            throw new ApiValidateException(ConstantMessage.ID_ERR00004, MessageUtils.getMessage(ConstantMessage.ID_ERR00004));
        }
        Authentication authentication = null;
        try {
            authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(entity.getMail(), entity.getPassword()));
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new ApiValidateException(ConstantMessage.ID_AUTH_ERR00001, MessageUtils.getMessage(ConstantMessage.ID_AUTH_ERR00001));
        }
        SecurityContextHolder.getContext().setAuthentication(authentication);
        CustomUserDetailsService userDetails = (CustomUserDetailsService) authentication.getPrincipal();
        String token = tokenProvider.generateJwtToken(authentication);
        UserEntity entityOld = userEntityService.updateLastLogin(userDetails.getUsername());
        UserResponse response = modelMapper.map(entityOld, UserResponse.class);
        Map<String, Object> map = new HashMap<String, Object>();
        map.put(ConstantColumns.USER_ENTITY, response);
        map.put(ConstantColumns.TOKEN, token);
        return new ResultBean(map, ConstantStatus.STATUS_OK, ConstantMessage.MESSAGE_OK);
    }

    @Override
    public ResultBean tokenAuth(String token) throws ApiValidateException, Exception {
        return null;
    }

    @Override
    public ResultBean registerAuth(String json) throws ApiValidateException, Exception {
        UserEntity entity = new UserEntity();
        JsonObject jsonObject = DataUtil.getJsonObject(json);
        ValidateData.validate(ConstantJsonFileValidate.FILE_REGISTER_JSON_VALIDATE, jsonObject, false);
        entity = gson.fromJson(jsonObject, UserEntity.class);
        UserRoleEntity userRole = this.roleRepository.findByAuthority(ConstantRole.ROLE_USER);
        Set<UserRoleEntity> roles = new HashSet<>();
        roles.add(userRole);
        entity.setAuthorities(roles);
        entity.setPassword(encoder.encode(DataUtil.getJsonString(jsonObject, ConstantColumns.PASSWORD)));
        entity.setStatus(ConstUserStatus.UN_CONFIRMED);

        if (userEntityRepository.existsByMail(entity.getMail())) {
            throw new ApiValidateException(ConstantMessage.ID_ERR00001, MessageUtils.getMessage(ConstantMessage.ID_ERR00001));
        }
        String code = String.valueOf(ThreadLocalRandom.current().nextInt(10000, 99999));
        List<Object[]> list = new ArrayList<>();
        Object[] object = new Object[2];
        object[0] = code;
        object[1] = entity.getMail();
        list.add(object);
        MailInfoResponse mailInfo = new MailInfoResponse(entity.getMail(), MailTypeEnum.REGISTER.getText(), list, MailTypeEnum.REGISTER);
        try {
            mailerService.send(mailInfo);
        } catch (MessagingException e) {
            e.printStackTrace();
        }

        entity.setCode(code);
        userEntityRepository.save(entity);
        return new ResultBean(entity, ConstantStatus.STATUS_OK, ConstantMessage.MESSAGE_OK);
    }

    @Override
    public ResultBean forgotPasswordAuth(String mail) throws ApiValidateException, Exception {
        if (Boolean.TRUE.equals(userEntityRepository.existsByMail(mail))) {
            throw new ApiValidateException(ConstantMessage.ID_ERR00001, MessageUtils.getMessage(ConstantMessage.ID_ERR00001));
        }
        Object[] object = new Object[1];
        object[0] = "www.example.com";
        List<Object[]> list = new ArrayList<>();
        list.add(object);
        MailInfoResponse mailInfo = new MailInfoResponse(mail, MailTypeEnum.FORGOT.getText(), list, MailTypeEnum.FORGOT);
        try {
            mailerService.send(mailInfo);
        } catch (MessagingException e) {
            e.printStackTrace();
        }
        return new ResultBean(null, ConstantStatus.STATUS_OK, ConstantMessage.MESSAGE_OK);
    }

    @Override
    public ResultBean changePassword(String json) throws ApiValidateException, Exception {
        try{
        LocalDateTime now = LocalDateTime.now();
            int year = now.getYear();
            int month = now.getMonthValue();
            int day = now.getDayOfMonth();
            int hour = now.getHour();
            int minute = now.getMinute();
        String exp = Base64.getEncoder().encodeToString((year+"-"+month+"-"+day+"-"+hour+"-"+minute).getBytes());
        Map<String,String> map = new Gson().fromJson(json,Map.class);
        String mail = map.get("mail");
        String oldPass = map.get("oldPass");
        UserEntity user = userEntityRepository.findOneByMail(mail).orElseThrow(() -> new ApiValidateException(ConstantMessage.ID_ERR00002, ConstantColumns.USER_ID));
        try {
            authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(mail, oldPass));
        } catch (Exception ex) {
                ex.printStackTrace();
                return new ResultBean(ConstantStatus.STATUS_BAD_REQUEST,"Old Password",ConstantMessage.MESSAGE_OK);
        }
        Object[] object = new Object[2];
        object[0] = user.getFirstName() + " " + user.getLastName();
        object[1] = "http://"
                +LOCAL_HOST+"/confirm?required="
                +Base64.getEncoder().encodeToString(user.getId().getBytes())
                +"&pwd="+Base64.getEncoder().encodeToString(map.get("password").getBytes())
                +"&expired="+exp;
        List<Object[]> list = new ArrayList<>();
        list.add(object);
        MailInfoResponse mailInfo = new MailInfoResponse(mail, MailTypeEnum.CHANGE_PASS.getText(), list, MailTypeEnum.CHANGE_PASS);
        mailerService.send(mailInfo);
        return new ResultBean(map,ConstantStatus.STATUS_OK,ConstantMessage.MESSAGE_OK);
        }catch (MessagingException e) {
            e.printStackTrace();
            return new ResultBean(ConstantStatus.STATUS_SYSTEM_ERROR,"400",ConstantMessage.MESSAGE_SYSTEM_ERROR);
        }
    }

    @Override
    public boolean confirmChange(String id, String newPwd) throws ApiValidateException, Exception {
        try {
            String idConvert = new String(Base64.getDecoder().decode(id));
            String newPwdConvert = new String(Base64.getDecoder().decode(newPwd));
            userEntityRepository.changePassword(encoder.encode(newPwdConvert),idConvert);
            return true;
        }catch (Exception e){
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public UserEntity authentication() throws ApiValidateException, Exception {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        CustomUserDetailsService userPrincipal = (CustomUserDetailsService) authentication.getPrincipal();
        UserEntity entityOld = userEntityService.findOneByMail(userPrincipal.getUsername());
        return entityOld;
    }

    @Override
    public ResultBean checkCode(String json) throws ApiValidateException, Exception {
        JsonObject jsonObject = DataUtil.getJsonObject(json);
        ValidateData.validate(ConstantJsonFileValidate.FILE_CHECK_JSON_VALIDATE, jsonObject, false);
        String mail = null;
        String code = null;
        if (DataUtil.hasMember(jsonObject, ConstantColumns.MAIL)) {
            mail = DataUtil.getJsonString(jsonObject, ConstantColumns.MAIL);
        }
        if (DataUtil.hasMember(jsonObject, ConstantColumns.CODE)) {
            code = DataUtil.getJsonString(jsonObject, ConstantColumns.CODE);
        }
        UserEntity user = userEntityRepository.findOneByMail(mail).orElseThrow(() -> new ApiValidateException(ConstantMessage.ID_ERR00002, ConstantColumns.USER_ID));
        Boolean check = false;
        if(user.getCode().equals(code)){
            check = true;
            user.setCode(null);
            user.setStatus(ConstUserStatus.VERIFIED);
            userEntityRepository.save(user);
            return new ResultBean(ConstantStatus.STATUS_OK, ConstantMessage.MESSAGE_OK);
        }
        return new ResultBean(ConstantStatus.STATUS_BAD_REQUEST, ConstantMessage.MESSAGE_SYSTEM_ERROR);
    }



    private void convertJsonToEntityLogin(JsonObject json, UserEntity entity) throws ApiValidateException {
        if (DataUtil.hasMember(json, ConstantColumns.MAIL)) {
            entity.setMail(DataUtil.getJsonString(json, ConstantColumns.MAIL));
        }
        if (DataUtil.hasMember(json, ConstantColumns.PASSWORD)) {
            entity.setPassword(DataUtil.getJsonString(json, ConstantColumns.PASSWORD));
        }
    }
}
